// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ML;
using Microsoft.OpenApi.Models;
using Microsoft.ML.Data;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;

// Configure app
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddPredictionEnginePool<SentimentModel.ModelInput, SentimentModel.ModelOutput>()
    .FromFile("SentimentModel.mlnet");

builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Description = "Docs for my API", Version = "v1" });
});
var app = builder.Build();

app.UseSwagger();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
    });
}


// Define prediction route & handler
app.MapPost("/predict",
    async (PredictionEnginePool<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEnginePool, SentimentModel.ModelInput input) =>
        await Task.FromResult(predictionEnginePool.Predict(input)));

app.MapGet("/", () => "Welcome to the Sentiment Analysis API! Use POST /predict with a JSON body to get predictions.");

app.MapGet("/Getprediction",
    async (PredictionEnginePool<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEnginePool) =>
    {
        // Example input data
        var sampleData = new SentimentModel.ModelInput()
        {
            Col0 = "This restaurant was bad."
        };
        // Predict output of sample data
        var result = predictionEnginePool.Predict(sampleData);
        // If Prediction is 1, sentiment is "Positive"; otherwise, sentiment is "Negative"
        var sentiment = result.PredictedLabel == 1 ? "Positive" : "Negative";
        
        return await Task.FromResult($"Text: {sampleData.Col0}\nSentiment: {sentiment}");
    });

app.MapGet("/Pred", async (PredictionEnginePool<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEnginePool, string str) =>
{
    var sampleData = new SentimentModel.ModelInput()
    {
        Col0 = str
    };
    // Predict output of sample data
    var result = predictionEnginePool.Predict(sampleData);
    // If Prediction is 1, sentiment is "Positive"; otherwise, sentiment is "Negative"
    var sentiment = result.PredictedLabel == 1 ? "Positive" : "Negative";

    return await Task.FromResult($"Text: {sampleData.Col0}\nSentiment: {sentiment}");
}
);


// Run app
app.Run();
